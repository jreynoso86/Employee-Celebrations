{"version":3,"file":"asAsync.test.js","sourceRoot":"../src/","sources":["asAsync.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { asAsync } from './asAsync';\nimport { act, render, waitFor } from '@testing-library/react';\n\ndescribe('asAsync', () => {\n  it('can async load exports', async () => {\n    let _resolve: (result: React.ElementType<{}>) => void = () => undefined;\n    let _loadCalled = false;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const loadThingPromise = new Promise<any>((resolve: any) => {\n      _resolve = resolve;\n    });\n\n    const AsyncThing = asAsync({\n      load: () => {\n        _loadCalled = true;\n        return loadThingPromise;\n      },\n    });\n    const { container, unmount } = render(<AsyncThing />);\n\n    expect(_loadCalled).toBe(true);\n    expect(container).toBeEmptyDOMElement();\n    expect(_resolve).toBeTruthy();\n\n    await act(async () => {\n      _resolve(() => <div>thing</div>);\n      // allow microtasks to flush\n      await Promise.resolve();\n    });\n\n    await waitFor(() => expect(container.firstChild).toHaveTextContent('thing'));\n    _loadCalled = false;\n\n    // Test cached case.\n    render(<AsyncThing />);\n    expect(_loadCalled).toBe(false);\n    expect(container.firstChild).toHaveTextContent('thing');\n    unmount();\n  });\n\n  it('can async load with placeholder', async () => {\n    let _resolve: (result: React.ElementType<{}>) => void = () => undefined;\n    let _loadCalled = false;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const loadThingPromise = new Promise<any>((resolve: any) => {\n      _resolve = resolve;\n    });\n\n    const AsyncThing = asAsync({\n      load: () => {\n        _loadCalled = true;\n        return loadThingPromise;\n      },\n    });\n    const { container, unmount } = render(<AsyncThing asyncPlaceholder={() => <div>placeholder</div>} />);\n\n    expect(_loadCalled).toBe(true);\n    expect(container).toHaveTextContent('placeholder');\n    expect(_resolve).toBeTruthy();\n\n    await act(async () => {\n      _resolve(() => <div>thing</div>);\n      await Promise.resolve();\n    });\n\n    await waitFor(() => expect(container.firstChild).toHaveTextContent('thing'));\n    unmount();\n  });\n});\n"]}