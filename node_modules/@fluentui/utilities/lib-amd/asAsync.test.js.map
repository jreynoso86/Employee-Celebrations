{"version":3,"file":"asAsync.test.js","sourceRoot":"../src/","sources":["asAsync.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { asAsync } from './asAsync';\nimport { act, render, waitFor } from '@testing-library/react';\n\ndescribe('asAsync', () => {\n  it('can async load exports', async () => {\n    let _resolve: (result: React.ElementType<{}>) => void = () => undefined;\n    let _loadCalled = false;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const loadThingPromise = new Promise<any>((resolve: any) => {\n      _resolve = resolve;\n    });\n\n    const AsyncThing = asAsync({\n      load: () => {\n        _loadCalled = true;\n        return loadThingPromise;\n      },\n    });\n    const { container, unmount } = render(<AsyncThing />);\n\n    expect(_loadCalled).toBe(true);\n    expect(container).toBeEmptyDOMElement();\n    expect(_resolve).toBeTruthy();\n\n    await act(async () => {\n      _resolve(() => <div>thing</div>);\n      // allow microtasks to flush\n      await Promise.resolve();\n    });\n\n    await waitFor(() => expect(container.firstChild).toHaveTextContent('thing'));\n    _loadCalled = false;\n\n    // Test cached case.\n    render(<AsyncThing />);\n    expect(_loadCalled).toBe(false);\n    expect(container.firstChild).toHaveTextContent('thing');\n    unmount();\n  });\n\n  it('can async load with placeholder', async () => {\n    let _resolve: (result: React.ElementType<{}>) => void = () => undefined;\n    let _loadCalled = false;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const loadThingPromise = new Promise<any>((resolve: any) => {\n      _resolve = resolve;\n    });\n\n    const AsyncThing = asAsync({\n      load: () => {\n        _loadCalled = true;\n        return loadThingPromise;\n      },\n    });\n    const { container, unmount } = render(<AsyncThing asyncPlaceholder={() => <div>placeholder</div>} />);\n\n    expect(_loadCalled).toBe(true);\n    expect(container).toHaveTextContent('placeholder');\n    expect(_resolve).toBeTruthy();\n\n    await act(async () => {\n      _resolve(() => <div>thing</div>);\n      await Promise.resolve();\n    });\n\n    await waitFor(() => expect(container.firstChild).toHaveTextContent('thing'));\n    unmount();\n  });\n});\n"]}