{"version":3,"file":"jsx.js","sourceRoot":"../src/","sources":["jsx.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\n\n/**\n * Our own alias for `JSXElement` type that is compatible with both React 17 and React 18+.\n * Use this type when annotating JSX markup in all our code in order to avoid issues between different React versions.\n *\n * Example usage:\n *\n * BAD:\n * ```tsx\n * const renderFoo = (state: FooState) = <div {...props}>Hello World</div>;\n * // infers\n * // R17:  declare const renderFoo: (state: FooState) => JSXElement;\n * // R18+: declare const renderFoo: (state: FooState) => React.JSXElement;\n * ```\n *\n * GOOD:\n * ```tsx\n * import type { JSXElement } from '@fluentui/utilities';\n * const renderFoo = (state: FooState): JSXElement = <div {...props}>Hello World</div>;\n * ```\n */\nexport type JSXElement = React.ReactElement<\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  any,\n  any\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n>;\n\n/**\n * Alias for `JSX.IntrinsicElements` keys that is compatible with both React 17 and React 18+.\n * Use this type to get the intrinsic element keys from React types in order to avoid issues\n * between different React versions.\n */\nexport type JSXIntrinsicElementKeys = Exclude<React.ElementType, React.ComponentType>;\n\n/**\n * Our own alias for `JSX.IntrinsicElements` type that is compatible with both React 17 and React 18+.\n * Use this type to get the intrinsic elements from React types in order to avoid issues\n * between different React versions.\n */\nexport type JSXIntrinsicElement<Element extends JSXIntrinsicElementKeys> = React.ComponentProps<Element>;\n"]}